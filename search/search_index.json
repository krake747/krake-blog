{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Hey there! I am Kevin from Luxembourg.</p> <p>I studied banking and finance in Innsbruck, Austria, where I discovered my passion for programming. When I returned back home I started out as a financial risk analyst for risk and asset managers. Now, after a few years I have fully transitioned into a full stack developer.</p> <p>My current focus for backend solutions is the .NET ecosystem and for the frontend I use Angular.  </p> <p>In addition, I am a hobby cyclist who at the current moment prefers to go on gravel rides.</p> <p>The current bike collection:</p> <ul> <li>Trek Top Fuel SL 9.8 Project One (2017)</li> <li>Trek Powerfly 7 (2022)</li> <li>Trek Checkpoint SLR 6 Project One (2024)</li> </ul> <p>Still missing a road bike to complete the collection though.</p>"},{"location":"blog/2024/12/01/aoc-2024-day-01-tackling-historian-hysteria/","title":"AOC 2024, Day 01: Tackling Historian Hysteria","text":"<p>Advent of Code 2024 is here, and as always on Day 1, it starts with a simpler challenge: Historian Hysteria. In this post, we will primarily provide solutions in both C# and F#, showcasing the beauty of solving problems in multiple languages.</p>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/01/aoc-2024-day-01-tackling-historian-hysteria/#elf-shenanigans","title":"Elf Shenanigans","text":"<p>In Day 1 of Advent of Code 2024, we are given two lists of location IDs. The goal is to:</p> <ol> <li>Find the total distance between the two lists after sorting and comparing corresponding pairs.</li> <li>Calculate a similarity score based on how often each number in the first list appears in the second.</li> </ol>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/01/aoc-2024-day-01-tackling-historian-hysteria/#part-1-distance-between-sorted-lists","title":"Part 1: Distance Between Sorted Lists","text":"<p>To solve Part 1, we need to:</p> <ul> <li>Sort both lists.</li> <li>Compare each corresponding pair of numbers.</li> <li>Sum the absolute differences between the pairs.</li> </ul>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/01/aoc-2024-day-01-tackling-historian-hysteria/#part-2-calculating-the-similarity-score","title":"Part 2: Calculating the Similarity Score","text":"<p>For Part 2, we calculate a similarity score by:</p> <ul> <li>Adding up each number from the left list.</li> <li>Multiplying each number by how many times it appears in the right list.</li> </ul>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/01/aoc-2024-day-01-tackling-historian-hysteria/#santas-ingenious-solutions","title":"Santa's Ingenious Solutions","text":"C#F#Python <pre><code>using AdventOfCode.Lib;\n\nnamespace AdventOfCode.Y2024;\n\n[AocPuzzle(2024, 1, \"Historian Hysteria\", \"C#\")]\npublic sealed class Day01 : IAocDay&lt;int&gt;\n{\n    public static int Part1(AocInput input) =&gt; input.AllLines\n        .Pipe(lines =&gt;\n        {\n            var left = Instructions(lines, 0);\n            var right = Instructions(lines, 1);\n            return left.Zip(right, (l, r) =&gt; Math.Abs(l - r)).Sum();\n        });\n\n    public static int Part2(AocInput input) =&gt; input.AllLines\n        .Pipe(lines =&gt;\n        {\n            var left = Instructions(lines, 0);\n            var counts = Instructions(lines, 1).CountBy(i =&gt; i).ToDictionary();\n            return left.Sum(id =&gt; counts.GetValueOrDefault(id) * id);\n        });\n\n    private static IEnumerable&lt;int&gt; Instructions(IEnumerable&lt;string&gt; lines, int col) =&gt;\n        from line in lines\n        let nums = line.Split(\"   \").Select(int.Parse).ToArray()\n        orderby nums[col]\n        select nums[col];\n}\n</code></pre> <pre><code>open AdventOfCode.Lib\n\n[&lt;AocPuzzle(2024, 1, \"Historian Hysteria\", \"F#\")&gt;]\nmodule Fay01 =\n\n    let instructions (lines: string seq) (col: int) =\n        lines\n        |&gt; Seq.map (fun line -&gt; line.Split \"   \" |&gt; Array.map int)\n        |&gt; Seq.sortBy (fun nums -&gt; nums[col])\n        |&gt; Seq.map (fun nums -&gt; nums[col])\n\n    let part1 (input: AocInput) =\n        let column = instructions input.Lines\n        let left = column 0\n        let right = column 1\n\n        Seq.zip left right |&gt; Seq.map (fun x -&gt; abs (fst x - snd x)) |&gt; Seq.sum\n\n    let part2 (input: AocInput) =\n        let column = instructions input.Lines\n        let left = column 0\n        let counts = column 1 |&gt; Seq.countBy id |&gt; Map.ofSeq\n\n        let getCount id =\n            Map.tryFind id counts |&gt; Option.defaultValue 0\n\n        left |&gt; Seq.sumBy (fun id -&gt; getCount id * id)\n</code></pre> <pre><code>from collections import Counter\n\ndef instructions(lines: list[str], col: int) -&gt; list[int]:\n    return sorted(int(line.split(\"   \")[col]) for line in lines)\n\n\ndef part1(input: AocInput) -&gt; int:\n    return sum(abs(l - r) for l, r in zip(instructions(input.lines, 0), instructions(input.lines, 1)))\n\n\ndef part2(input: AocInput) -&gt; int:\n    left = instructions(input.lines, 0)\n    counts = Counter(instructions(input.lines, 1))\n    return sum([counts[id] * id for id in left])\n</code></pre>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/01/aoc-2024-day-01-tackling-historian-hysteria/#santas-elves-reflections","title":"Santa's &amp; Elves' Reflections","text":"<p>Day 1 of Advent of Code 2024 introduced an interesting puzzle, involving sorting and comparing lists of historical location IDs.</p> <p>Check out the repository for solutions: AdventOfCode &amp; AdventOfCode.Lib.</p>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/02/aoc-2024-day-02-red-nosed-reports/","title":"AOC 2024, Day 02: Red-Nosed Reports","text":"<p>Day 2 of Advent of Code 2024, Red-Nosed Reports, involves analyzing reactor data to determine safe reports. In this post, we'll share solutions in both C# and F# for solving the puzzle.</p>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/02/aoc-2024-day-02-red-nosed-reports/#elf-shenanigans","title":"Elf Shenanigans","text":"<p>We are given reports with levels. Each report must follow two rules to be considered safe:</p> <ol> <li>The levels must be monotonic, meaning they must either be all increasing or all decreasing.</li> <li>The difference between adjacent levels must be between 1 and 3.</li> </ol>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/02/aoc-2024-day-02-red-nosed-reports/#part-1-checking-for-safe-reports","title":"Part 1: Checking for Safe Reports","text":"<p>We need to determine how many reports are safe by verifying the above two conditions.</p>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/02/aoc-2024-day-02-red-nosed-reports/#part-2-accounting-for-the-problem-dampener","title":"Part 2: Accounting for the Problem Dampener","text":"<p>The Problem Dampener allows us to remove one level from an unsafe report to make it safe. We need to adjust the analysis to check if removing one level makes the report safe by ensuring it becomes monotonic and follows the difference rule.</p>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/02/aoc-2024-day-02-red-nosed-reports/#santas-ingenious-solutions","title":"Santa's Ingenious Solutions","text":"C#F#Python <pre><code>using AdventOfCode.Lib;\nusing Pair = (int Left, int Right);\n\nnamespace AdventOfCode.Y2024;\n\n[AocPuzzle(2024, 2, \"Red-Nosed Reports\", \"C#\")]\npublic sealed class Day02 : IAocDay&lt;int&gt;\n{\n    public static int Part1(AocInput input) =&gt; \n        input.Lines\n            .Pipe(lines =&gt; Instructions(lines).Count(Monotonic));\n\n    public static int Part2(AocInput input) =&gt;         \n        input.Lines\n            .Pipe(lines =&gt; \n                Instructions(lines).Count(instructions =&gt; ProblemDampener(instructions).Any(Monotonic))\n            );\n\n    private static bool Monotonic(int[] instructions) =&gt;\n        instructions.Zip(instructions.Skip(1), (l, r) =&gt; new Pair(l, r))\n            .ToArray()\n            .Pipe(pairs =&gt; MonotonicIncreasing(pairs) || MonotonicDecreasing(pairs));\n\n    private static bool MonotonicIncreasing(Pair[] pairs) =&gt;\n        pairs.All(p =&gt; p.Right - p.Left is &gt;= 1 and &lt;= 3);\n\n    private static bool MonotonicDecreasing(Pair[] pairs) =&gt;\n        pairs.All(p =&gt; p.Left - p.Right is &gt;= 1 and &lt;= 3);\n\n    private static IEnumerable&lt;int[]&gt; ProblemDampener(int[] instructions) =&gt;\n        from i in Enumerable.Range(0, instructions.Length + 1)\n        let take = instructions[..Math.Max(0, i - 1)]\n        let skip = instructions[i..]\n        select (int[])[..take, ..skip];\n\n    private static IEnumerable&lt;int[]&gt; Instructions(IEnumerable&lt;string&gt; lines) =&gt; \n        lines.Select(l =&gt; l.Split(' ').Select(int.Parse).ToArray());\n}\n</code></pre> <pre><code>open AdventOfCode.Lib\n\n[&lt;AocPuzzle(2024, 2, \"Red-Nosed Reports\", \"F#\")&gt;]\nmodule Fay02 =\n\n    let instructions (lines: string seq) =\n        lines |&gt; Seq.map (fun line -&gt; line.Split ' ' |&gt; Array.map int)\n\n    let monotonicIncreasing (pairs: (int * int) array) =\n        pairs\n        |&gt; Array.forall (fun (left, right) -&gt; 1 &lt;= right - left &amp;&amp; right - left &lt;= 3)\n\n    let monotonicDecreasing (pairs: (int * int) array) =\n        pairs\n        |&gt; Array.forall (fun (left, right) -&gt; 1 &lt;= left - right &amp;&amp; left - right &lt;= 3)\n\n    let monotonic (instructions: int array) =\n        let left = instructions |&gt; Array.take (Array.length instructions - 1)\n        let right = instructions |&gt; Array.skip 1\n        let pairs = Array.zip left right\n\n        (monotonicIncreasing pairs) || (monotonicDecreasing pairs)\n\n    let problemDampener (instructions: int array) =\n        seq {\n            for i in 0 .. Array.length instructions do\n                let take = instructions |&gt; Seq.take (max 0 (i - 1))\n                let skip = instructions |&gt; Seq.skip i\n                yield Seq.append take skip |&gt; Seq.toArray\n        }\n\n    let part1 (input: AocInput) =\n        input.Lines |&gt; instructions |&gt; Seq.filter monotonic |&gt; Seq.length\n\n    let part2 (input: AocInput) =\n        input.Lines\n        |&gt; instructions\n        |&gt; Seq.filter (fun instruction -&gt; problemDampener instruction |&gt; Seq.exists monotonic)\n        |&gt; Seq.length\n</code></pre> <pre><code>from aoc.core import AocInput\nfrom dataclasses import astuple, dataclass\nfrom typing import Iterator\n\n\n@dataclass(frozen=True, slots=True)\nclass Pair:\n    left: int\n    right: int\n\n    def __iter__(self):\n        return iter(astuple(self))\n\n\ndef instructions(lines: list[str]) -&gt; list[list[int]]:\n    return [list(map(int, l.split(\" \"))) for l in lines]\n\n\ndef monotonic_increasing(pairs: list[Pair]) -&gt; bool:\n    return all(1 &lt;= (r - l) &lt;= 3 for l, r in pairs)\n\n\ndef monotonic_decreasing(pairs: list[Pair]) -&gt; bool:\n    return all(1 &lt;= (l - r) &lt;= 3 for l, r in pairs)\n\n\ndef monotonic(instructions: list[int]) -&gt; bool:\n    pairs = [Pair(ls, rs) for ls, rs in zip(instructions, instructions[1:])]\n    return monotonic_increasing(pairs) or monotonic_decreasing(pairs)\n\n\ndef problem_dampener(instructions: list[str]) -&gt; Iterator[list[int]]:\n    for i in range(len(instructions) + 1):\n        yield instructions[: max(0, i - 1)] + instructions[i:]\n\n\ndef part1(input: AocInput) -&gt; int:\n    return sum(monotonic(i) for i in instructions(input.lines))\n\n\ndef part2(input: AocInput) -&gt; int:\n    return sum(any(monotonic(i) for i in problem_dampener(instr)) for instr in instructions(input.lines))\n</code></pre>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/02/aoc-2024-day-02-red-nosed-reports/#santas-elves-reflections","title":"Santa's &amp; Elves' Reflections","text":"<p>Day 2 of Advent of Code 2024 involved analyzing reactor reports based on level changes. By checking for monotonicity and valid differences, we can determine safe reports. The Problem Dampener adds flexibility by allowing the removal of one level to make an unsafe report safe.</p> <p>Check out the repository for solutions: AdventOfCode &amp; AdventOfCode.Lib.</p>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/03/aoc-2024-day-03-mull-it-over/","title":"AOC 2024, Day 03: Mull It Over","text":"<p>Day 3 of Advent of Code 2024, Mull It Over, is all about parsing and interpreting a simulated computer memory dump.  This puzzle introduces conditional execution and multiplication operations, blending regex wizardry with state management.</p>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/03/aoc-2024-day-03-mull-it-over/#elf-shenanigans","title":"Elf Shenanigans","text":"<p>The input consists of lines representing operations on a simulated memory:</p> <ol> <li><code>mul(x, y)</code>: Multiply x and y, and add the result to the total.</li> <li><code>do()</code>: Enable operations.</li> <li><code>don't()</code>: Disable operations.</li> </ol>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/03/aoc-2024-day-03-mull-it-over/#part-1-basic-computation","title":"Part 1: Basic Computation","text":"<p>For the first part, we simply compute the total result by summing the products of all <code>mul(x, y)</code> operations. There are no conditional statements; every operation is applied.</p>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/03/aoc-2024-day-03-mull-it-over/#part-2-conditional-execution","title":"Part 2: Conditional Execution","text":"<p>In the second part, the <code>do()</code> and <code>don't()</code> commands toggle whether subsequent operations are executed.  When <code>do()</code> is called, operations resume as normal; when <code>don't()</code> is called, operations are ignored until a <code>do()</code> command appears again.</p>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/03/aoc-2024-day-03-mull-it-over/#santas-ingenious-solutions","title":"Santa's Ingenious Solutions","text":"C#F#Python <pre><code>using System.Text.RegularExpressions;\nusing AdventOfCode.Lib;\nusing State = (bool Enabled, long Total);\n\nnamespace AdventOfCode.Y2024;\n\n[AocPuzzle(2024, 3, \"Mull It Over\", \"C#\")]\npublic sealed partial class Day03 : IAocDay&lt;long&gt;\n{\n    public static long Part1(AocInput input) =&gt;\n        input.Text.Pipe(text =&gt; ComputerMemory().Matches(text).Sum(Instructions));\n\n    public static long Part2(AocInput input) =&gt; input.Text\n        .Pipe(text =&gt; ComputerMemoryWithConditionals().Matches(text)\n            .Aggregate(\n                new State(true, 0),\n                (state, m) =&gt; m.Value switch\n                {\n                    \"do()\" =&gt; state with { Enabled = true },\n                    \"don't()\" =&gt; state with { Enabled = false },\n                    _ when state.Enabled =&gt; state with { Total = state.Total + Instructions(m) },\n                    _ =&gt; state\n                }\n            )\n        )\n        .Pipe(state =&gt; state.Total);\n\n    private static int Instructions(Match m) =&gt;\n        int.Parse(m.Groups[1].Value) * int.Parse(m.Groups[2].Value);\n\n    [GeneratedRegex(@\"mul\\((\\d+),(\\d+)\\)\", RegexOptions.Compiled | RegexOptions.NonBacktracking)]\n    private static partial Regex ComputerMemory();\n\n    [GeneratedRegex(@\"do\\(\\)|don't\\(\\)|mul\\((\\d+),(\\d+)\\)\", RegexOptions.Compiled | RegexOptions.NonBacktracking)]\n    private static partial Regex ComputerMemoryWithConditionals();\n}\n</code></pre> <pre><code>open System.Text.RegularExpressions\nopen AdventOfCode.Lib\n\n[&lt;AocPuzzle(2024, 3, \"Mull It Over\", \"F#\")&gt;]\nmodule Fay03 =\n\n    [&lt;Struct&gt;]\n    type State = { Enabled: bool; Total: int64 }\n\n    let instructions (m: Match) : int64 =\n        int64 (m.Groups[1].Value) * int64 (m.Groups[2].Value)\n\n    let conditionalInstructions (state: State) (m: Match) =\n        match m.Value with\n        | \"do()\" -&gt; { state with Enabled = true }\n        | \"don't()\" -&gt; { state with Enabled = false }\n        | _ when state.Enabled -&gt; { state with Total = state.Total + instructions m }\n        | _ -&gt; state\n\n    let part1 (input: AocInput) : int64 =\n        input.Text |&gt; Regex(@\"mul\\((\\d+),(\\d+)\\)\").Matches |&gt; Seq.sumBy instructions\n\n    let part2 (input: AocInput) : int64 =\n        input.Text\n        |&gt; Regex(@\"do\\(\\)|don't\\(\\)|mul\\((\\d+),(\\d+)\\)\").Matches\n        |&gt; Seq.fold conditionalInstructions { Enabled = true; Total = 0 }\n        |&gt; _.Total\n</code></pre> <pre><code>from aoc.core import AocInput\nfrom dataclasses import dataclass\nfrom functools import reduce\nfrom typing import Match\nimport re\n\n\n@dataclass(frozen=True, slots=True)\nclass State:\n    enabled: bool\n    total: int\n\n\ndef instructions(m: Match) -&gt; int:\n    return int(m.groups()[0]) * int(m.groups()[1])\n\n\ndef conditional_instructions(state: State, m: Match) -&gt; State:\n    match m.group(0):\n        case \"do()\":\n            return State(True, state.total)\n        case \"don't()\":\n            return State(False, state.total)\n        case _ if state.enabled:\n            return State(state.enabled, state.total + instructions(m))\n        case _:\n            return state\n\n\ndef part1(input: AocInput) -&gt; int:\n    return sum(instructions(m) for m in re.finditer(r\"mul\\((\\d+),(\\d+)\\)\", input.text))\n\n\ndef part2(input: AocInput) -&gt; int:\n    state = reduce(\n        conditional_instructions,\n        [m for m in re.finditer(r\"do\\(\\)|don't\\(\\)|mul\\((\\d+),(\\d+)\\)\", input.text)],\n        State(True, 0),\n    )\n    return state.total\n</code></pre>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/03/aoc-2024-day-03-mull-it-over/#santas-elves-reflections","title":"Santa's &amp; Elves' Reflections","text":"<p>Day 3 of Advent of Code 2024 introduced a fun mix of parsing, conditional logic, and basic arithmetic.  The challenge lay in correctly interpreting the state changes introduced by <code>do()</code> and <code>don't()</code> commands while processing the input.</p> <p>Check out the repository for solutions: AdventOfCode &amp; AdventOfCode.Lib.</p>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/04/aoc-2024-day-04-ceres-search/","title":"AOC 2024, Day 04: Ceres Search","text":"<p>Day 4 of Advent of Code 2024, Ceres Search, challenges us with a word search on the Ceres monitoring station. In this puzzle, we're tasked with finding instances of the word \"XMAS\" in various directions, and later, identifying X-MAS patterns shaped as an 'X'.</p>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/04/aoc-2024-day-04-ceres-search/#elf-shenanigans","title":"Elf Shenanigans","text":"<p>The input consists of a grid of characters, and we need to find occurrences of the word \"XMAS\" both normally and in the form of an X-MAS pattern.</p>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/04/aoc-2024-day-04-ceres-search/#part-1-word-search","title":"Part 1: Word Search","text":"<p>For the first part, we are asked to locate every instance of the word \"XMAS\" in the grid. The word can appear horizontally, vertically, diagonally, or in reverse.</p>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/04/aoc-2024-day-04-ceres-search/#part-2-x-mas-pattern","title":"Part 2: X-MAS Pattern","text":"<p>In the second part, we're looking for an X-shaped pattern where \"MAS\" appears in both arms of the X. Each \"MAS\" can appear forwards or backwards.</p>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/04/aoc-2024-day-04-ceres-search/#santas-ingenious-solutions","title":"Santa's Ingenious Solutions","text":"C#F#Python <pre><code>using System.Collections.Frozen;\nusing System.Numerics;\nusing AdventOfCode.Lib;\nusing Map = System.Collections.Frozen.FrozenDictionary&lt;AdventOfCode.Y2024.Point, char&gt;;\n\nnamespace AdventOfCode.Y2024;\n\n[AocPuzzle(2024, 4, \"Ceres Search\", \"C#\")]\npublic sealed class Day04 : IAocDay&lt;int&gt;\n{\n    public static int Part1(AocInput input) =&gt;\n        input.AllLines\n            .Pipe(ParseMap)\n            .Pipe(\n                map =&gt;\n                    from point in map.Keys\n                    from direction in new[] { Point.East, Point.SouthEast, Point.South, Point.SouthWest }\n                    select SearchWord(map, \"XMAS\", point, direction)\n            )\n            .Pipe(matches =&gt; matches.Count(m =&gt; m));\n\n    public static int Part2(AocInput input) =&gt;\n        input.AllLines\n            .Pipe(ParseMap)\n            .Pipe(\n                map =&gt;\n                    from point in map.Keys\n                    select SearchWord(map, \"MAS\", point + Point.NorthWest, Point.SouthEast) &amp;&amp;\n                        SearchWord(map, \"MAS\", point + Point.SouthWest, Point.NorthEast)\n            )\n            .Pipe(matches =&gt; matches.Count(m =&gt; m));\n\n    private static bool SearchWord(Map map, string pattern, Point point, Point direction)\n    {\n        var len = pattern.Length;\n        char[] chars = [..Enumerable.Range(0, len).Select(i =&gt; map.GetValueOrDefault(point + direction * i))];\n        return chars.SequenceEqual(pattern) || chars.SequenceEqual(pattern.Reverse());\n    }\n\n    private static Map ParseMap(string[] lines) =&gt; (\n        from y in Enumerable.Range(0, lines.Length)\n        from x in Enumerable.Range(0, lines[0].Length)\n        select KeyValuePair.Create(new Point(x, y), lines[y][x])\n    ).ToFrozenDictionary();\n}\n</code></pre> <pre><code>open AdventOfCode.Lib\n\n[&lt;AocPuzzle(2024, 4, \"Ceres Search\", \"F#\")&gt;]\nmodule Fay04 =\n\n    open Lib\n\n    let parseMap (lines: string array) : Map&lt;Point, char&gt; =\n        lines\n        |&gt; Array.indexed\n        |&gt; Array.collect (fun (y, line) -&gt; [|\n            for x, c in line |&gt; Seq.toArray |&gt; Array.indexed -&gt; { X = x; Y = y }, c\n        |])\n        |&gt; Map.ofArray\n\n    let searchWord (map: Map&lt;Point, char&gt;) (pattern: string) (p: Point) (dir: Point) =\n        let chars = [\n            for i in 0 .. pattern.Length - 1 -&gt; map.TryFind (p + dir * i) |&gt; Option.defaultValue ' '\n        ]\n\n        chars = Seq.toList pattern || chars = Seq.toList (Seq.rev pattern)\n\n    let searchXmas (map: Map&lt;Point, char&gt;) =\n        let directions = [ Point.East; Point.SouthEast; Point.South; Point.SouthWest ]\n        let searchMapForXmas = searchWord map \"XMAS\"\n\n        map.Keys\n        |&gt; Seq.collect (fun p -&gt; directions |&gt; Seq.map (searchMapForXmas p))\n        |&gt; Seq.filter id\n\n    let searchXmasShape (map: Map&lt;Point, char&gt;) =\n        let searchMapForXmasShape = searchWord map \"MAS\"\n\n        map.Keys\n        |&gt; Seq.filter (fun p -&gt;\n            searchMapForXmasShape (p + Point.NorthWest) Point.SouthEast\n            &amp;&amp; searchMapForXmasShape (p + Point.SouthWest) Point.NorthEast)\n\n    let part1 (input: AocInput) =\n        input.AllLines |&gt; parseMap |&gt; searchXmas |&gt; Seq.length\n\n    let part2 (input: AocInput) =\n        input.AllLines |&gt; parseMap |&gt; searchXmasShape |&gt; Seq.length\n</code></pre> <pre><code>from aoc.core import AocInput\nfrom collections import defaultdict\nfrom dataclasses import astuple, dataclass\nfrom functools import partial\n\n\n@dataclass(frozen=True, slots=True)\nclass Point:\n    x: int\n    y: int\n\n    def __iter__(self):\n        return iter(astuple(self))\n\n    @staticmethod\n    def North():\n        return Point(0, -1)\n\n    @staticmethod\n    def NorthEast():\n        return Point(1, -1)\n\n    @staticmethod\n    def East():\n        return Point(1, 0)\n\n    @staticmethod\n    def SouthEast():\n        return Point(1, 1)\n\n    @staticmethod\n    def South():\n        return Point(0, 1)\n\n    @staticmethod\n    def SouthWest():\n        return Point(-1, 1)\n\n    @staticmethod\n    def West():\n        return Point(-1, 0)\n\n    @staticmethod\n    def NorthWest():\n        return Point(-1, -1)\n\n    def __add__(self, point: \"Point\") -&gt; \"Point\":\n        if isinstance(point, Point) is False:\n            return NotImplemented\n        return Point(self.x + point.x, self.y + point.y)\n\n    def __mul__(self, factor: int) -&gt; \"Point\":\n        if isinstance(factor, int) is False:\n            return NotImplemented\n        return Point(self.x * factor, self.y * factor)\n\n\nMap = defaultdict[Point, str]\n\n\ndef parse_map(lines: list[str]) -&gt; Map:\n    return defaultdict(str, {Point(x, y): c for y, l in enumerate(lines) for x, c in enumerate(l)})\n\n\ndef search_word(map: Map, pattern: str, p: Point, dir: Point) -&gt; bool:\n    chars = [map.get(p + dir * i) for i in range(0, len(pattern))]\n    return chars == list(pattern) or chars == list(reversed(pattern))\n\n\ndef search_xmas(map: Map) -&gt; list[bool]:\n    directions = [Point.East(), Point.SouthEast(), Point.South(), Point.SouthWest()]\n    search_map_for_xmas = partial(search_word, map, \"XMAS\")\n    return [search_map_for_xmas(p, dir) for p in map.keys() for dir in directions]\n\n\ndef search_xmas_shape(map: Map) -&gt; list[bool]:\n    search_map_for_xmas_shape = partial(search_word, map, \"MAS\")\n    return [\n        search_map_for_xmas_shape(p + Point.NorthWest(), Point.SouthEast())\n        and search_map_for_xmas_shape(p + Point.SouthWest(), Point.NorthEast())\n        for p in map.keys()\n    ]\n\n\ndef part1(input: AocInput) -&gt; int:\n    return sum(search_xmas(parse_map(input.lines)))\n\n\ndef part2(input: AocInput) -&gt; int:\n    return sum(search_xmas_shape(parse_map(input.lines)))\n</code></pre>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/04/aoc-2024-day-04-ceres-search/#santas-elves-reflections","title":"Santa's &amp; Elves' Reflections","text":"<p>Day 4 of Advent of Code 2024 presents a difficult challenge in pattern matching and grid traversal.  The key to solving both parts lies in recognizing all possible directions and orientations of the word \"XMAS\" and \"X-MAS\".  The problem is a great exercise in multi-directional searching and leveraging grid-based operations.</p> <p>Check out the repository for solutions: AdventOfCode &amp; AdventOfCode.Lib.</p>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/05/aoc-2024-day-05-print-queue/","title":"AOC 2024, Day 05: Print Queue","text":"<p>Day 5 of Advent of Code 2024, Print Queue, brings us to the North Pole's printing department, where safety is key as the Elves prepare for the sleigh launch. Our task is to ensure that updates to the safety manual are printed in the correct order. The challenge combines order validation, sorting, and some arithmetic to guarantee a smooth process.</p>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/05/aoc-2024-day-05-print-queue/#elf-shenanigans","title":"Elf Shenanigans","text":"","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/05/aoc-2024-day-05-print-queue/#part-1-checking-the-order","title":"Part 1: Checking the Order","text":"<p>For the first part, we verify that the updates follow the specified ordering rules. For each rule <code>X|Y</code>, page <code>X</code> must appear before page <code>Y</code>. Once the updates are validated, we calculate the middle page number of the valid updates and sum them.</p>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/05/aoc-2024-day-05-print-queue/#part-2-fixing-the-order","title":"Part 2: Fixing the Order","text":"<p>For the second part, we need to reorder the updates that don't follow the rules. After applying the correct order, we, like in part 1, find the middle page number for each corrected update and sum them up.</p>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/05/aoc-2024-day-05-print-queue/#santas-ingenious-solutions","title":"Santa's Ingenious Solutions","text":"C#F#Python <pre><code>using Pages = string[];\nusing PageUpdates = string[][];\nusing PagePrecedenceRules = System.Collections.Generic.Comparer&lt;string&gt;;\n\nnamespace AdventOfCode.Y2024;\n\n[AocPuzzle(2024, 5, \"Print Queue\", \"C#\")]\npublic sealed class Day05 : IAocDay&lt;int&gt;\n{\n    public static int Part1(AocInput input) =&gt; \n        input.Text\n            .Pipe(SleighLaunchSafetyManual)\n            .Pipe(manual =&gt; manual.Updates\n                .Where(pages =&gt; ElfPageSorting(manual.PrecedenceRules, pages))\n                .Sum(ExtractMiddlePage)\n            );\n\n    public static int Part2(AocInput input) =&gt; \n        input.Text\n            .Pipe(SleighLaunchSafetyManual)\n            .Pipe(manual =&gt; manual.Updates\n                .Where(pages =&gt; ElfPageSorting(manual.PrecedenceRules, pages) is false)\n                .Select(pages =&gt; pages.OrderBy(p =&gt; p, manual.PrecedenceRules).ToArray())\n                .Sum(ExtractMiddlePage)\n            );\n\n    private static SafetyManual SleighLaunchSafetyManual(string text)\n    {\n        var parts = text.Split(\"\\n\\n\");\n        var ordering = parts[0].Split('\\n').ToHashSet();\n        var updates = parts[1].Split('\\n').Select(u =&gt; u.Split(',')).ToArray();\n        return new SafetyManual(\n            updates,\n            PagePrecedenceRules.Create((p1, p2) =&gt; ordering.Contains($\"{p1}|{p2}\") ? -1 : 1)\n        );\n    }\n\n    private static bool ElfPageSorting(PagePrecedenceRules precedenceRules, Pages pages) =&gt;\n        pages.SequenceEqual(pages.OrderBy(p =&gt; p, precedenceRules));\n\n    private static int ExtractMiddlePage(Pages pages) =&gt; \n        int.Parse(pages[pages.Length / 2]);\n\n    private readonly record struct SafetyManual(PageUpdates Updates, PagePrecedenceRules PrecedenceRules); \n}\n</code></pre> <pre><code>open AdventOfCode.Lib\n\n[&lt;AocPuzzle(2024, 5, \"Print Queue\", \"F#\")&gt;]\nmodule Fay05 =\n\n    type Pages = string array\n    type PageUpdates = string array array\n    type PagePrecedenceRules = System.Collections.Generic.Comparer&lt;string&gt;\n\n    type SafetyManual = {\n        Updates: PageUpdates\n        PrecedenceRules: PagePrecedenceRules\n    }\n\n    let sleighLaunchSafetyManual (text: string) =\n        let parts = text.Split(\"\\n\\n\")\n        let ordering = parts[0].Split('\\n') |&gt; Set.ofArray\n        let updates = parts[1].Split('\\n') |&gt; Array.map _.Split(',')\n\n        let precedenceRules =\n            PagePrecedenceRules.Create(fun p1 p2 -&gt; if ordering.Contains $\"%s{p1}|%s{p2}\" then -1 else 1)\n\n        { Updates = updates; PrecedenceRules = precedenceRules }\n\n    let elfPageSorting (precedenceRules: PagePrecedenceRules) (pages: Pages) =\n        pages = Array.sortWith (fun p1 p2 -&gt; precedenceRules.Compare(p1, p2)) pages\n\n    let extractMiddlePage (pages: Pages) = int pages[Array.length pages / 2]\n\n    let part1 (input: AocInput) =\n        input.Text\n        |&gt; sleighLaunchSafetyManual\n        |&gt; fun manual -&gt;\n            manual.Updates\n            |&gt; Array.filter (elfPageSorting manual.PrecedenceRules)\n            |&gt; Array.sumBy extractMiddlePage\n\n\n    let part2 (input: AocInput) =\n        input.Text\n        |&gt; sleighLaunchSafetyManual\n        |&gt; fun manual -&gt;\n            manual.Updates\n            |&gt; Array.filter (fun pages -&gt; not (elfPageSorting manual.PrecedenceRules pages))\n            |&gt; Array.map (Array.sortWith (fun p1 p2 -&gt; manual.PrecedenceRules.Compare(p1, p2)))\n            |&gt; Array.sumBy extractMiddlePage\n</code></pre> <pre><code>from aoc.core import AocInput\nfrom dataclasses import dataclass\nfrom functools import cmp_to_key\nfrom typing import Callable\n\ntype Pages = list[str]\ntype PageUpdates = list[Pages]\ntype PagePrecedenceRules = Callable[[str, str], int]\n\n\n@dataclass(frozen=True, slots=True)\nclass SafetyManual:\n    updates: PageUpdates\n    precedence_rules: PagePrecedenceRules\n\n\ndef sleigh_launch_safety_manual(text: str) -&gt; SafetyManual:\n    parts = text.split(\"\\n\\n\")\n    ordering = set(parts[0].split(\"\\n\"))\n    updates = [u.split(\",\") for u in parts[1].split(\"\\n\")]\n    precedence_rules = lambda p1, p2: -1 if f\"{p1}|{p2}\" in ordering else 1\n    return SafetyManual(updates, precedence_rules)\n\n\ndef elf_page_sorting(precedence_rules: PagePrecedenceRules, pages: Pages) -&gt; bool:\n    return pages == sorted(pages, key=cmp_to_key(precedence_rules))\n\n\ndef extract_middle_page(pages: Pages) -&gt; int:\n    return int(pages[len(pages) // 2])\n\n\ndef part1(input: AocInput) -&gt; int:\n    manual = sleigh_launch_safety_manual(input.text)\n    return sum(\n        extract_middle_page(p) \n        for p in [\n            p for p in manual.updates if elf_page_sorting(manual.precedence_rules, p)\n        ]\n    )\n\n\ndef part2(input: AocInput) -&gt; int:\n    manual = sleigh_launch_safety_manual(input.text)\n    return sum(\n        extract_middle_page(p)\n        for p in [\n            sorted(p, key=cmp_to_key(manual.precedence_rules))\n            for p in [p for p in manual.updates if elf_page_sorting(manual.precedence_rules, p) is False]\n        ]\n    )\n</code></pre>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/05/aoc-2024-day-05-print-queue/#santas-elves-reflections","title":"Santa's &amp; Elves' Reflections","text":"<p>Day 5 of Advent of Code 2024 presents a logical challenge in dependency management and sorting. The key to solving both parts lies in understanding how to validate page orders and using sorting techniques for reordering. With the right approach, we've ensured that the North Pole's safety manuals are properly updated for the upcoming sleigh launch!</p> <p>Check out the repository for solutions: AdventOfCode &amp; AdventOfCode.Lib.</p>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/06/aoc-2024-day-06-guard-gallivant/","title":"AOC 2024, Day 06: Guard Gallivant","text":"<p>Day 6 of Advent of Code 2024, Guard Gallivant, brings us toNorth Pole prototype suit manufacturing lab... in the year 1518, where we are challenged to track the movement of a guard in a maze-like environment full of obstacles.</p>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/06/aoc-2024-day-06-guard-gallivant/#elf-shenanigans","title":"Elf Shenanigans","text":"","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/06/aoc-2024-day-06-guard-gallivant/#part-1-simulating-the-guards-patrol-path","title":"Part 1: Simulating the Guard's Patrol Path","text":"<p>In the first part, we are given a map and asked to simulate the movement of the guard. The guard starts at a specific position and moves forward in a direction unless obstructed. When encountering an obstacle (<code>#</code>), the guard rotates to the right and continues moving.</p> <p>The solution involves simulating this process and counting the number of distinct positions the guard visits before returning to a previously visited position.</p>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/06/aoc-2024-day-06-guard-gallivant/#part-2-introducing-obstacles-to-create-patrol-loops","title":"Part 2: Introducing Obstacles to Create Patrol Loops","text":"<p>In the second part, the task becomes more complex. We must update the map by replacing some open spaces (<code>.</code>) with obstacles (<code>#</code>) and check if that causes the guard to revisit any previously visited positions. The goal is to determine how many such changes can create a loop in the patrol route.</p>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/06/aoc-2024-day-06-guard-gallivant/#santas-ingenious-solutions","title":"Santa's Ingenious Solutions","text":"C#F#Python <pre><code>using AdventOfCode.Lib;\nusing PatrolMap = System.Collections.Generic.Dictionary&lt;AdventOfCode.Lib.Point, char&gt;;\n\nnamespace AdventOfCode.Y2024;\n\n[AocPuzzle(2024, 6, \"Guard Gallivant\", \"C#\")]\npublic sealed class Day06 : IAocDay&lt;int&gt;\n{\n    public static int Part1(AocInput input) =&gt;\n        input.AllLines\n            .Pipe(lines =&gt;\n            {\n                var map = ParsePatrolMap(lines);\n                var start = LocateGuardStart(map, '^');\n                return TrackGuardRoute(map, start);\n            })\n            .Pipe(route =&gt; route.Positions.Count);\n\n    public static int Part2(AocInput input) =&gt;\n        input.AllLines\n            .Pipe(lines =&gt;\n            {\n                var map = ParsePatrolMap(lines);\n                var start = LocateGuardStart(map, '^');\n                return TrackGuardRoute(map, start).Positions.Where(p =&gt; map[p] is '.')\n                    .Sum(open =&gt;\n                    {\n                        var updatedMap = UpdateMap(map, '#', open);\n                        var (_, loop) = TrackGuardRoute(updatedMap, start);\n                        return loop ? 1 : 0;\n                    });\n            });\n\n    private static PatrolMap UpdateMap(PatrolMap map, char obstacle, Point position) =&gt;\n        map.ToDictionary(kvp =&gt; kvp.Key, kvp =&gt; kvp.Key == position ? obstacle : kvp.Value);\n\n    private static GuardRoute TrackGuardRoute(PatrolMap map, Point start)\n    {\n        var position = start;\n        var patrol = new PatrolState(start, Point.North);\n        var visited = new HashSet&lt;PatrolState&gt;();\n        while (map.ContainsKey(patrol.Position) &amp;&amp; visited.Add(patrol))\n        {\n            patrol = map.GetValueOrDefault(patrol.Position + patrol.Direction) switch\n            {\n                '#' =&gt; patrol with { Direction = Point.RotateRight(patrol.Direction) },\n                _ =&gt; patrol with { Position = position += patrol.Direction }\n            };\n        }\n\n        return new GuardRoute(visited.Select(s =&gt; s.Position).ToHashSet(), visited.Contains(patrol));\n    }\n\n    private static Point LocateGuardStart(PatrolMap map, char c) =&gt;\n        map.Single(p =&gt; p.Value == c).Key;\n\n    private static PatrolMap ParsePatrolMap(string[] lines) =&gt; (\n        from y in Enumerable.Range(0, lines.Length)\n        from x in Enumerable.Range(0, lines[0].Length)\n        select KeyValuePair.Create(new Point(x, y), lines[y][x])\n    ).ToDictionary();\n\n    private readonly record struct PatrolState(Point Position, Point Direction);\n\n    private readonly record struct GuardRoute(HashSet&lt;Point&gt; Positions, bool Loop);\n}\n</code></pre> <pre><code>open AdventOfCode.Lib\n\n[&lt;AocPuzzle(2024, 6, \"Guard Gallivant\", \"F#\")&gt;]\nmodule Fay06 =\n\n    open Lib\n\n    type PatrolMap = Map&lt;Point, char&gt;\n    type Positions = Set&lt;Point&gt;\n    type PatrolState = { Position: Point; Direction: Point }\n    type GuardRoute = { Positions: Positions; Loop: bool }\n\n    let parsePatrolMap (lines: string array) =\n        lines\n        |&gt; Array.indexed\n        |&gt; Array.collect (fun (y, line) -&gt; [|\n            for x, c in line |&gt; Seq.toArray |&gt; Array.indexed -&gt; { X = x; Y = y }, c\n        |])\n        |&gt; Map.ofArray\n\n    let locateGuardStart (map: PatrolMap) (c: char) =\n        map |&gt; Seq.find (fun kvp -&gt; kvp.Value = c) |&gt; _.Key\n\n    [&lt;TailCall&gt;]\n    let trackGuardRoute (map: PatrolMap) (start: Point) =\n        let rec track (visited: Set&lt;PatrolState&gt;) (patrol: PatrolState) =\n            if map.ContainsKey patrol.Position &amp;&amp; not (visited.Contains patrol) then\n                let visited = visited.Add patrol\n\n                match map.TryFind(patrol.Position + patrol.Direction) |&gt; Option.defaultValue ' ' with\n                | '#' -&gt;\n                    track visited {\n                        patrol with\n                            Direction = Point.rotateRight patrol.Direction\n                    }\n\n                | _ -&gt;\n                    track visited {\n                        patrol with\n                            Position = patrol.Position + patrol.Direction\n                    }\n\n            else\n                {\n                    Positions = visited |&gt; Seq.map _.Position |&gt; Set.ofSeq\n                    Loop = visited.Contains patrol\n                }\n\n        track Set.empty { Position = start; Direction = Point.North }\n\n    let updateMap (map: PatrolMap) (obstacle: char) (position: Point) =\n        map |&gt; Map.map (fun k v -&gt; if k = position then obstacle else v)\n\n    let part1 (input: AocInput) =\n        input.AllLines\n        |&gt; parsePatrolMap\n        |&gt; (fun map -&gt; (map, locateGuardStart map '^'))\n        |&gt; (fun (map, start) -&gt; trackGuardRoute map start)\n        |&gt; _.Positions\n        |&gt; Set.count\n\n    let part2 (input: AocInput) =\n        let map = parsePatrolMap input.AllLines\n        let start = locateGuardStart map '^'\n        let route = trackGuardRoute map start\n\n        route\n        |&gt; _.Positions\n        |&gt; Set.filter (fun p -&gt; map[p] = '.')\n        |&gt; Seq.sumBy (fun obstacle -&gt;\n            let updatedMap = updateMap map '#' obstacle\n            let route = trackGuardRoute updatedMap start\n            route |&gt; _.Loop |&gt; (fun loop -&gt; if loop then 1 else 0))\n</code></pre> <pre><code>from aoc.core import AocInput\n</code></pre>","tags":["AOC","C#","F#","Python"]},{"location":"blog/2024/12/06/aoc-2024-day-06-guard-gallivant/#santas-elves-reflections","title":"Santa's &amp; Elves' Reflections","text":"<p>Day 6 of Advent of Code 2024 presented a challenging maze-like puzzle where we had to track the guard's movements and determine whether the guard revisited a position or got stuck in a loop.</p> <p>Check out the repository for solutions: AdventOfCode &amp; AdventOfCode.Lib.</p>","tags":["AOC","C#","F#","Python"]},{"location":"snippets/","title":"Snippets","text":"<p>Useful code snippets and templates.</p>"},{"location":"snippets/#links","title":"Links","text":"<p>The <code>.NET</code> snippets repo can be found here: Krake Blog Snippets</p>"},{"location":"snippets/angular/prettier/","title":"Prettier","text":""},{"location":"snippets/angular/prettier/#install","title":"Install","text":"<pre><code>npm install -D prettier\n</code></pre>"},{"location":"snippets/angular/prettier/#setup","title":"Setup","text":""},{"location":"snippets/angular/prettier/#config","title":"Config","text":".prettierrc<pre><code>{\n    \"printWidth\": 100,\n    \"tabWidth\": 4,\n    \"useTabs\": false,\n    \"semi\": true,\n    \"singleQuote\": false,\n    \"trailingComma\": \"none\",\n    \"bracketSpacing\": true,\n    \"bracketSameLine\": false,\n    \"arrowParens\": \"avoid\",\n    \"htmlWhitespaceSensitivity\": \"ignore\"\n}\n</code></pre>"},{"location":"snippets/angular/prettier/#application","title":"Application","text":"<pre><code>{\n    \"scripts\": {\n        \"ng\": \"ng\",\n        \"start\": \"ng serve\",\n        \"build\": \"ng build\",\n        \"watch\": \"ng build --watch --configuration development\",\n        \"test\": \"ng test\",\n        \"format:test\": \"prettier --list-different \\\"./src/**/*.{ts,html,css,scss,json}\\\"\", \n        \"format:write\": \"prettier --write \\\"./src/**/*.{ts,html,css,scss,json}\\\"\"\n    },\n}\n</code></pre>"},{"location":"snippets/angular/prettier/#workspace-project","title":"Workspace Project","text":"<pre><code>{\n    \"scripts\": {\n        \"ng\": \"ng\",\n        \"start\": \"ng serve\",\n        \"build\": \"ng build\",\n        \"watch\": \"ng build --watch --configuration development\",\n        \"test\": \"ng test\",\n        \"format:test\": \"prettier --list-different \\\"./projects/**/*.{ts,html,css,scss,json}\\\"\",\n        \"format:write\": \"prettier --write \\\"./projects/**/*.{ts,html,css,scss,json}\\\"\",\n    },\n}\n</code></pre>"},{"location":"snippets/aoc/library/","title":"Library","text":"C#F#Python <pre><code>namespace AdventOfCode.Lib;\n\npublic sealed record AocInput(\n    string Text, \n    IEnumerable&lt;string&gt; Lines, \n    string[] AllLines\n);\n\npublic readonly record struct Point(int X, int Y)\n    : IAdditionOperators&lt;Point, Point, Point&gt;, IMultiplyOperators&lt;Point, Point, Point&gt;,\n        IMultiplyOperators&lt;Point, int, Point&gt;\n{\n    public static readonly Point North = new(0, -1); // Move up\n    public static readonly Point NorthEast = new(1, -1); // Move diagonally up-right\n    public static readonly Point East = new(1, 0); // Move right\n    public static readonly Point SouthEast = new(1, 1); // Move diagonally down-right\n    public static readonly Point South = new(0, 1); // Move down\n    public static readonly Point SouthWest = new(-1, 1); // Move diagonally down-left\n    public static readonly Point West = new(-1, 0); // Move left\n    public static readonly Point NorthWest = new(-1, -1); // Move diagonally up-left\n\n    private static readonly Point RotationClockwise90 = new(0, 1);\n\n    public static Point operator +(Point p1, Point p2) =&gt; new(p1.X + p2.X, p1.Y + p2.Y);\n    public static Point operator *(Point p1, Point p2) =&gt; new(p1.X * p2.X - p1.Y * p2.Y, p1.X * p2.Y + p1.Y * p2.X);\n    public static Point operator *(Point p, int factor) =&gt; new(p.X * factor, p.Y * factor);\n\n    public static Point RotateRight(Point p) =&gt; p * RotationClockwise90; // new(-Y, X)\n}\n\npublic static class FunctionalExtensions\n{\n    public static TOut Pipe&lt;TIn, TOut&gt;(this TIn source, Func&lt;TIn, TOut&gt; func) =&gt; func(source);\n}\n</code></pre> <pre><code>module Lib =\n\n    [&lt;Struct&gt;]\n    type Point = {\n        X: int\n        Y: int\n    } with\n\n        static member North = { X = 0; Y = -1 }\n        static member NorthEast = { X = 1; Y = -1 }\n        static member East = { X = 1; Y = 0 }\n        static member SouthEast = { X = 1; Y = 1 }\n        static member South = { X = 0; Y = 1 }\n        static member SouthWest = { X = -1; Y = 1 }\n        static member West = { X = -1; Y = 0 }\n        static member NorthWest = { X = -1; Y = -1 }\n        static member RotationClockwise90 = { X = 0; Y = 1 }\n        static member (+)(p1: Point, p2: Point) = { X = p1.X + p2.X; Y = p1.Y + p2.Y }\n\n        static member (*)(p1: Point, p2: Point) = {\n            X = p1.X * p2.X - p1.Y * p2.Y\n            Y = p1.X * p2.Y + p1.Y * p2.X\n        }\n\n        static member (*)(p: Point, factor: int) = { X = p.X * factor; Y = p.Y * factor }\n        static member rotateRight(p: Point) = p * Point.RotationClockwise90 \n</code></pre> <pre><code>@dataclass(frozen=True)\nclass AocInput:\n    text: str\n    lines: list[str]\n\n@dataclass(frozen=True, slots=True)\nclass Point:\n    x: int\n    y: int\n\n    def __iter__(self):\n        return iter(astuple(self))\n\n    @staticmethod\n    def North():\n        return Point(0, -1)\n\n    @staticmethod\n    def NorthEast():\n        return Point(1, -1)\n\n    @staticmethod\n    def East():\n        return Point(1, 0)\n\n    @staticmethod\n    def SouthEast():\n        return Point(1, 1)\n\n    @staticmethod\n    def South():\n        return Point(0, 1)\n\n    @staticmethod\n    def SouthWest():\n        return Point(-1, 1)\n\n    @staticmethod\n    def West():\n        return Point(-1, 0)\n\n    @staticmethod\n    def NorthWest():\n        return Point(-1, -1)\n\n    def __add__(self, point: \"Point\") -&gt; \"Point\":\n        if isinstance(point, Point) is False:\n            return NotImplemented\n        return Point(self.x + point.x, self.y + point.y)\n\n    def __mul__(self, factor: int) -&gt; \"Point\":\n        if isinstance(factor, int) is False:\n            return NotImplemented\n        return Point(self.x * factor, self.y * factor)\n</code></pre>"},{"location":"snippets/docker/docker-cli/","title":"Docker CLI","text":""},{"location":"snippets/docker/jaeger/","title":"Jeager","text":"<p>Jaeger is an open-source distributed tracing system designed for monitoring and troubleshooting microservices-based architectures. It helps track requests across services, visualize performance bottlenecks, and improve system observability.</p> <pre><code>services:\n  &lt;name&gt;.jaeger:\n    image: jaegertracing/all-in-one:latest\n    container_name: &lt;name&gt;.jaeger\n    ports:\n      - \"4317:4317\"\n      - \"4318:4318\"\n      - \"16686:16686\"\n</code></pre>"},{"location":"snippets/docker/mongodb/","title":"MongoDB","text":"<p>MongoDB is an open-source NoSQL database system that stores data in flexible, JSON-like documents. It's known for its scalability and ease of use, making it ideal for applications requiring fast, schema-less data storage and retrieval.</p> <pre><code>services:\n  &lt;name&gt;.database.mongo:\n    image: mongo:latest\n    container_name: &lt;name&gt;.mongo\n    ports:\n      - \"27017:27017\"\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: mongo\n      MONGO_INITDB_ROOT_PASSWORD: mongo\n    volumes:\n      - ./.containers/mongo:/data/db\n</code></pre> <pre><code>services:\n  mongodb:\n    build:\n      context: .\n      dockerfile: database/Dockerfile\n    container_name: mongodb\n    environment:\n        MONGO_INITDB_ROOT_USERNAME: root\n        MONGO_INITDB_ROOT_PASSWORD: root\n    ports:\n      - \"27017:27017\"\n    command: --replSet rs0 --keyFile /etc/mongo-keyfile --bind_ip_all --port 27017\n    healthcheck:\n      test: echo \"try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'127.0.0.1:27017'}]}) }\" | mongosh --port 27017 -u root -p root --authenticationDatabase admin\n      interval: 5s\n      timeout: 15s\n      start_period: 15s\n      retries: 10\n    volumes:\n      - data:/data/db\n\nvolumes:\n  data: {}\n</code></pre> <pre><code>FROM mongo:latest\nRUN openssl rand -base64 756 &gt; /etc/mongo-keyfile \nRUN chmod 400 /etc/mongo-keyfile \nRUN chown mongodb:mongodb /etc/mongo-keyfile\n</code></pre> <pre><code>\"ConnectionStrings\": {\n    \"Mongo\": \"mongodb://root:root@localhost:27017/?replicaSet=rs0\"\n},\n</code></pre>"},{"location":"snippets/docker/mssql/","title":"MS SQL","text":"<p>Microsoft SQL Server (MSSQL) is a relational database management system that stores and manages data using structured query language (SQL). It provides tools for handling data operations, queries, and transactions, making it a robust choice for building and maintaining databases in various applications.</p> DefaultDocker VolumeLocal Volume <pre><code>services:\n  &lt;name&gt;.database.mssql:\n    image: mcr.microsoft.com/mssql/server:2022-latest\n    container_name: &lt;name&gt;.Database.Sql\n    environment:\n      - ACCEPT_EULA=true\n      - MSSQL_SA_PASSWORD=Admin#123\n      - MSSQL_PID=Express\n    ports:\n      - \"1433:1433\"\n</code></pre> <pre><code>services:\n  &lt;name&gt;.database.mssql:\n    image: mcr.microsoft.com/mssql/server:2022-latest\n    container_name: &lt;name&gt;.Database.Sql\n    environment:\n      - ACCEPT_EULA=true\n      - MSSQL_SA_PASSWORD=Admin#123\n      - MSSQL_PID=Express\n    ports:\n      - \"1433:1433\"\n    volumes:\n      - volume.&lt;name&gt;.database.mssql:/var/opt/mssql\n\nvolumes:\n  volume.&lt;name&gt;.database.mssql\n</code></pre> <pre><code>services:\n  &lt;name&gt;.database.mssql:\n    image: mcr.microsoft.com/mssql/server:2022-latest\n    container_name: &lt;name&gt;.Database.Sql\n    environment:\n      - ACCEPT_EULA=true\n      - MSSQL_SA_PASSWORD=Admin#123\n      - MSSQL_PID=Express\n    ports:\n      - \"1433:1433\"\n    volumes:\n      - ./.containers/mssql:/var/opt/mssql/data\n</code></pre>"},{"location":"snippets/docker/papercut/","title":"Papercut","text":"<p>Papercut is a lightweight SMTP server that is often used for testing email applications and configurations. It provides a simple and efficient way to simulate sending and receiving emails within a local development environment.</p> <pre><code>services:\n  &lt;name&gt;.papercut:\n    image: jijiechen/papercut:latest\n    container_name: &lt;name&gt;.papercut\n    ports:\n      - \"25:25\"\n      - \"37408:37408\"\n</code></pre>"},{"location":"snippets/docker/postgresql/","title":"PostgreSQL","text":"<p>PostgreSQL is an open-source database system that uses SQL to manage and query data. It's known for its flexibility and support for advanced features like complex queries and custom data types, making it a great choice for developers building a wide range of applications.</p> <pre><code>services:\n  &lt;name&gt;.database.postgresql:\n    image: postgres:latest\n    container_name: &lt;name&gt;.Database.PostgreSQL\n    environment:\n      - POSTGRES_DB=&lt;name&gt;\n      - POSTGRES_USER=sa\n      - POSTGRES_PASSWORD=Admin#123\n    ports:\n      - \"5432:5432\"\n</code></pre>"},{"location":"snippets/docker/rabbitmq/","title":"RabbitMQ","text":"<p>RabbitMQ is an open-source message broker that enables applications to communicate by sending and receiving messages through queues. It's known for its reliability, flexibility, and support for multiple messaging protocols, making it ideal for building scalable and distributed systems.</p> <pre><code>services:\n  &lt;name&gt;.queue.rabbitmq:\n    image: rabbitmq:management-alpine\n    container_name: &lt;name&gt;.queue.rabbitmq\n    hostname: &lt;name&gt;-queue\n    volumes:\n      - ./.containers/queue/data/:/var/lib/rabbitmq\n      - ./.containers/queue/log/:/var/log/rabbitmq\n    environment:\n      RABBITMQ_DEFAULT_USER: admin\n      RABBITMQ_DEFAULT_PASS: admin\n    ports:\n      - \"5672:5672\"\n      - \"15672:15672\"\n</code></pre>"},{"location":"snippets/docker/redis/","title":"Redis","text":"<p>Redis is an in-memory data store that allows you to quickly save and access data, making it useful for caching and real-time applications. It supports various data structures, like strings, lists, and hashes, and is known for its high performance and simplicity.</p> <pre><code>services:\n  &lt;name&gt;.redis:\n    image: redis:latest\n    container_name: &lt;name&gt;.Redis\n    restart: no\n    ports:\n      - \"6379:6379\"\n</code></pre>"},{"location":"snippets/docker/seq/","title":"Seq","text":"<p>Seq is a log server designed for collecting and querying structured log data from applications. It is used to analyze and troubleshoot applications by providing a powerful search interface and visualizations for logs.</p> <pre><code>services:\n  &lt;name&gt;.seq:\n    image: datalust/seq:latest\n    container_name: &lt;name&gt;.Seq\n    environment:\n      - ACCEPT_EULA=Y\n    ports:\n      - \"5341:5341\"\n      - \"8081:80\"\n</code></pre>"},{"location":"snippets/dotnet/dapper/","title":"Dapper","text":"<p>The repository for these snippets can be found here: Krake.Snippets.Dapper</p>","tags":[".NET","C#"]},{"location":"snippets/dotnet/dapper/#net-minimal-api-project","title":".NET Minimal API Project","text":"<p>Add the <code>Dapper</code> NuGet packages to the .NET project.  Additionally, you need to use one of the supported database providers. This example uses <code>Sqlite</code>.</p> <pre><code>dotnet add package Dapper\ndotnet add package System.Data.SQLite.Core\n</code></pre> <p>Afterwards add the database connection factory services in the <code>Program.cs</code> file.</p> Program.cs<pre><code>using System.Data;\nusing Dapper;\nusing Krake.Snippets.Dapper;\nusing Microsoft.Data.Sqlite;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddScoped&lt;IDbConnectionFactory, SqliteConnectionFactory&gt;(sp =&gt; // (1)\n{\n    var connectionString = sp.GetRequiredService&lt;IConfiguration&gt;().GetConnectionString(\"DefaultConnection\");\n    return new SqliteConnectionFactory(connectionString);\n});\n\nvar app = builder.Build();\n\napp.MapGet(\"/example\", async (IDbConnectionFactory dbConnectionFactory) =&gt;\n{\n    using var connection = await dbConnectionFactory.CreateConnectionAsync();\n    // Use the connection...\n    return Results.Ok();\n});\n\nusing (var scope = app.Services.CreateScope())\n{\n    var dbConnectionFactory = scope.ServiceProvider.GetRequiredService&lt;IDbConnectionFactory&gt;();\n    await new DatabaseInitializer(dbConnectionFactory).InitializeAsync();\n}\n\napp.Run();\n\nnamespace Krake.Snippets.Dapper\n{\n    public interface IDbConnectionFactory\n    {\n        Task&lt;IDbConnection&gt; CreateConnectionAsync(CancellationToken token = default);\n    }\n\n    public sealed class SqliteConnectionFactory(string connectionString) : IDbConnectionFactory\n    {\n        public async Task&lt;IDbConnection&gt; CreateConnectionAsync(CancellationToken token = default)\n        {\n            var connection = new SqliteConnection(connectionString);\n            await connection.OpenAsync(token);\n            return connection;\n        }\n    }\n\n    public sealed class DatabaseInitializer(IDbConnectionFactory connectionFactory)\n    {\n        public async Task InitializeAsync()\n        {\n            using var connection = await connectionFactory.CreateConnectionAsync();\n            await connection.ExecuteAsync( // lang=sql\n                \"\"\"\n                // Initialize bookstore database... // (2)\n                \"\"\"\n            );\n        }\n    }\n}\n</code></pre> <ol> <li><code>Scoped</code> lifetime ensures that each request gets its own instance of <code>IDbConnection</code>, which is ideal for managing database connections that should be opened and closed per request.</li> <li>The bookstore initialization scripts are found in the Krake.Snippets.Dapper repo.</li> </ol>","tags":[".NET","C#"]},{"location":"snippets/dotnet/dapper/#dapper-in-action","title":"Dapper in Action","text":"Bookstore.cs<pre><code>public sealed class Book\n{\n    public string Isbn { get; set; } = string.Empty;\n    public string Title { get; set; } = string.Empty;\n    public decimal Price { get; set; }\n    public List&lt;Author&gt; Authors { get; set; } = [];\n}\n\npublic sealed class Author\n{\n    public int Id { get; set; }\n    public string Name { get; set; } = string.Empty;\n}\n\npublic sealed class Customer\n{\n    public int Id { get; set; }\n    public string Name { get; set; } = string.Empty;\n    public string Email { get; set; } = string.Empty;\n}\n\npublic sealed class Order\n{\n    public int Id { get; set; }\n    public DateTime OrderDate { get; set; }\n    public Customer Customer { get; set; } = null!;\n    public List&lt;Book&gt; Books { get; set; } = [];\n}\n\npublic sealed class TopSellingBook\n{\n    public string Title { get; set; } = string.Empty;\n    public int TotalSold { get; set; }\n}\n</code></pre>","tags":[".NET","C#"]},{"location":"snippets/dotnet/dapper/#basic-queries-and-commands","title":"Basic Queries and Commands","text":"<pre><code>// Basic Dapper Command\napp.MapPost(\"/customers\", async (IDbConnectionFactory dbConnectionFactory, Customer customer) =&gt;\n{\n    using var connection = await dbConnectionFactory.CreateConnectionAsync();\n\n    const string sql = // lang=sql\n        \"\"\"\n        INSERT INTO Customers (Name, Email)\n        VALUES (@Name, @Email)\n        RETURNING Id;\n        \"\"\";\n\n    customer.Id = await connection.ExecuteScalarAsync&lt;int&gt;(sql, customer);\n\n    return customerId is null ? Results.BadRequest() : Results.Created($\"/customers/{customer.Id}\", customer);\n});\n\n// Basic Dapper Query\napp.MapGet(\"/customers/{id:int}\", async (IDbConnectionFactory dbConnectionFactory, int id) =&gt;\n{\n    using var connection = await dbConnectionFactory.CreateConnectionAsync();\n\n    const string sql = // lang=sql\n        \"\"\"\n        SELECT Id, Name, Email\n        FROM Customers\n        WHERE Id = @Id\n        \"\"\";\n\n    var customer = await connection.QuerySingleOrDefaultAsync&lt;Customer&gt;(sql, new { Id = id });\n\n    return customer is not null ? Results.Ok(customer) : Results.NotFound();\n});\n</code></pre>","tags":[".NET","C#"]},{"location":"snippets/dotnet/dapper/#advanced-queries-and-mapping","title":"Advanced Queries and Mapping","text":"<pre><code>// Advanced Dapper Query with mapping function\napp.MapGet(\"/books\", async (IDbConnectionFactory dbConnectionFactory) =&gt;\n{\n    using var connection = await dbConnectionFactory.CreateConnectionAsync();\n\n    const string sql = //lang=sql\n        \"\"\"\n            SELECT\n                b.Isbn, b.Title, b.Price,\n                a.Id, a.Name\n            FROM Books b\n                LEFT JOIN BookAuthors ba ON b.Isbn = ba.BookIsbn\n                LEFT JOIN Authors a ON ba.AuthorId = a.Id\n        \"\"\";\n\n    var books = new Dictionary&lt;string, Book&gt;();\n    _ = await connection.QueryAsync&lt;Book, Author, Book&gt;(\n        sql,\n        (book, author) =&gt;\n        {\n            if (books.TryGetValue(book.Isbn, out var existingBook) is false)\n            {\n                existingBook = book;\n                books.Add(existingBook.Isbn, existingBook);\n            }\n\n            existingBook.Authors.Add(author);\n            return existingBook;\n        },\n        splitOn: \"Id\"\n    );\n\n    return Results.Ok(new { Books = books.Values });\n});\n\n// Advanced Dapper Query with mapping function and custom response mapping\napp.MapGet(\"/orders\", async (IDbConnectionFactory dbConnectionFactory) =&gt;\n{\n    using var connection = await dbConnectionFactory.CreateConnectionAsync();\n\n    const string sql = //lang=sql\n        \"\"\"\n        SELECT\n            o.Id, o.OrderDate,\n            c.Id, c.Name, c.Email,\n            b.Isbn, b.Title\n        FROM Orders o\n            JOIN Customers c ON o.CustomerId = c.Id\n            LEFT JOIN OrderBooks ob ON o.Id = ob.OrderId\n            LEFT JOIN Books b ON ob.BookIsbn = b.Isbn\n        \"\"\";\n\n    var orders = new Dictionary&lt;int, Order&gt;();\n    _ = await connection.QueryAsync&lt;Order, Customer, Book, Order&gt;(\n        sql,\n        (order, customer, book) =&gt;\n        {\n            if (orders.TryGetValue(order.Id, out var existingOrder) is false)\n            {\n                existingOrder = order;\n                existingOrder.Customer = customer;\n                orders.Add(existingOrder.Id, existingOrder);\n            }\n\n            existingOrder.Books.Add(book);\n            return existingOrder;\n        },\n        splitOn: \"Id,Id,Isbn\"\n    );\n\n    return Results.Ok(new\n    {\n        Orders = orders.Values.Select(o =&gt; new\n        {\n            o.Id,\n            o.OrderDate,\n            o.Customer,\n            Books = o.Books.Select(b =&gt; new\n            {\n                b.Isbn,\n                b.Title\n            })\n        })\n    });\n});\n</code></pre>","tags":[".NET","C#"]},{"location":"snippets/dotnet/dapper/#dapper-multiple-result-sets","title":"Dapper Multiple Result Sets","text":"<pre><code>// Dapper multiple result sets\napp.MapGet(\"/sales-statistics\", async (IDbConnectionFactory dbConnectionFactory) =&gt;\n{\n    using var connection = await dbConnectionFactory.CreateConnectionAsync();\n\n    const string sql = // lang=sql\n        \"\"\"\n        SELECT COUNT(*) AS TotalOrders\n        FROM Orders;\n\n        SELECT SUM(b.Price * ob.Quantity) AS TotalSales\n        FROM Orders o\n        JOIN OrderBooks ob ON o.Id = ob.OrderId\n        JOIN Books b ON ob.BookIsbn = b.Isbn;\n\n        SELECT b.Title, SUM(ob.Quantity) AS TotalSold\n        FROM Books b\n        JOIN OrderBooks ob ON b.Isbn = ob.BookIsbn\n        GROUP BY b.Title\n        ORDER BY TotalSold DESC\n        LIMIT 5;\n        \"\"\";\n\n    await using var result = await connection.QueryMultipleAsync(sql);\n    var totalOrders = await result.ReadSingleAsync&lt;int&gt;();\n    var totalSales = await result.ReadSingleAsync&lt;decimal&gt;();\n    var topSellingBooks = (await result.ReadAsync&lt;TopSellingBook&gt;()).AsList();\n\n    return Results.Ok(new\n    {\n        TotalOrders = totalOrders,\n        TotalSales = totalSales,\n        TopSellingBooks = topSellingBooks\n    });\n});\n</code></pre>","tags":[".NET","C#"]},{"location":"snippets/dotnet/dapper/#other-database-providers","title":"Other Database Providers","text":"","tags":[".NET","C#"]},{"location":"snippets/dotnet/dapper/#ms-sql-server","title":"MS Sql Server","text":"<pre><code>using System.Data;\nusing Microsoft.Data.SqlClient;\n\npublic sealed class SqlConnectionFactory(string connectionString) : IDbConnectionFactory\n{\n    public async Task&lt;IDbConnection&gt; CreateConnectionAsync(CancellationToken token = default)\n    {\n        var connection = new SqlConnection(connectionString);\n        await connection.OpenAsync(token);\n        return connection;\n    }\n}\n</code></pre>","tags":[".NET","C#"]},{"location":"snippets/dotnet/dapper/#postgres","title":"Postgres","text":"<pre><code>using System.Data;\nusing Npgsql;\n\npublic sealed class NpgsqlConnectionFactory(string connectionString) : IDbConnectionFactory\n{\n    public async Task&lt;IDbConnection&gt; CreateConnectionAsync(CancellationToken token = default)\n    {\n        var connection = new NpgsqlConnection(connectionString);\n        await connection.OpenAsync(token);\n        return connection;\n    }\n}\n</code></pre>","tags":[".NET","C#"]},{"location":"snippets/dotnet/feature-flags/","title":"Feature Flags","text":"<p>The repository for these snippets can be found here: Krake.Snippets.FeatureFlags</p>","tags":[".NET","C#"]},{"location":"snippets/dotnet/feature-flags/#net-minimal-api-project","title":".NET Minimal API Project","text":"<p>Add this Nuget packages to the .NET project.</p> <pre><code>dotnet add package Microsoft.FeatureManagement.AspNetCore\n</code></pre> <p>Afterwards setup the feature management services in the <code>Program.cs</code> file.</p> Program.cs<pre><code>using Microsoft.AspNetCore.Mvc;\nusing Microsoft.FeatureManagement;\nusing Snippets.FeatureFlags;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddFeatureManagement(builder.Configuration.GetSection(\"FeatureFlags\")); // (1)\n\nvar app = builder.Build();\n\napp.MapGet(\"feature-a\", static () =&gt; Results.Ok(\"Hello from Feature A\")); // (2)\n\napp.MapGet(\"feature-b\", static async ([FromServices] IFeatureManager manager) =&gt;\n{\n    if (await manager.IsEnabledAsync(\"FeatureB\") is false) // (3)\n    {\n        return Results.NotFound();\n    }\n\n    return Results.Ok(\"Hello from Feature B\");\n});\n\napp.MapGet(\"feature-c\", () =&gt; Results.Ok(\"Hello from Feature C\"))\n    .AddEndpointFilter(static async (context, next) =&gt; // (4)\n    {\n        var featureManager = context.HttpContext.RequestServices.GetRequiredService&lt;IFeatureManager&gt;();\n        if (await featureManager.IsEnabledAsync(\"FeatureC\") is false)\n        {\n            return Results.NotFound();\n        }\n\n        return await next(context);\n    });\n\napp.MapGet(\"feature-d\", () =&gt; Results.Ok(\"Hello from Feature D\"))\n    .AddEndpointFilter&lt;FeatureFilter&gt;(); // (5)\n\napp.Run();\n\nnamespace Snippets.FeatureFlags\n{\n    internal sealed class FeatureFilter(IFeatureManager featureManager) : IEndpointFilter\n    {\n        public async ValueTask&lt;object?&gt; InvokeAsync(EndpointFilterInvocationContext context,\n            EndpointFilterDelegate next)\n        {\n            if (await featureManager.IsEnabledAsync(\"FeatureD\") is false)\n            {\n                return Results.NotFound();\n            }\n\n            return await next(context);\n        }\n    }\n}\n</code></pre> <ol> <li>Registers feature management and links it to the \"FeatureFlags\" section in the configuration.</li> <li>Does not use feature flags.</li> <li>Controls access to an endpoint based on the \"FeatureB\" flag via <code>IFeatureManager</code>.</li> <li>Uses an inline filter to manage access based on the \"FeatureC\" flag.</li> <li>Uses a custom filter class to manage access based on the \"FeatureD\" flag.</li> </ol> <p>Add the following section to the <code>appsettings.[env].json</code> configuration files which will allow you to enable and/or  disable feature during runtime.</p> appsettings.json<pre><code>{\n    \"FeatureFlags\": {\n        \"FeatureB\": false,\n        \"FeatureC\": true,\n        \"FeatureD\": true\n    },\n}\n</code></pre>","tags":[".NET","C#"]},{"location":"snippets/dotnet/global-exceptions/","title":"Global Exceptions","text":"<p>The repository for these snippets can be found here: Krake.Snippets.GlobalExceptions</p>","tags":[".NET","C#"]},{"location":"snippets/dotnet/global-exceptions/#net-minimal-api-project","title":".NET Minimal API Project","text":"<p>Create the <code>GlobalExceptionHandler</code> using the <code>IExceptionHandler</code>.</p> GlobalExceptionHandler.cs<pre><code>internal sealed class GlobalExceptionHandler(ILogger&lt;GlobalExceptionHandler&gt; logger)\n    : IExceptionHandler\n{\n    public async ValueTask&lt;bool&gt; TryHandleAsync(HttpContext httpContext, Exception exception,\n        CancellationToken cancellationToken = default)\n    {\n        logger.LogErrorUnhandledException(exception);\n\n        var problemDetails = new ProblemDetails\n        {\n            Status = StatusCodes.Status500InternalServerError,\n            Type = \"https://datatracker.ietf.org/doc/html/rfc7231#section-6.6.1\",\n            Title = \"Server failure\",\n            Extensions = new Dictionary&lt;string, object?&gt;\n            {\n                { \"traceId\", httpContext.TraceIdentifier }\n            }\n        };\n\n        httpContext.Response.StatusCode = problemDetails.Status.Value;\n\n        await httpContext.Response.WriteAsJsonAsync(problemDetails, cancellationToken);\n\n        return true;\n    }\n}\n\ninternal static partial class LoggerExtensions\n{\n    [LoggerMessage(Level = LogLevel.Error, Message = \"Unhandled exception occurred\")]\n    public static partial void LogErrorUnhandledException(this ILogger logger, Exception exception);\n}\n</code></pre> <p>Add the <code>GlobalExceptionHandler</code> to the service collection and for production environment add the <code>UseExceptionHandler</code> in the middleware pipeline.</p> Program.cs<pre><code>var builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddExceptionHandler&lt;GlobalExceptionHandler&gt;();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage(); // (1)\n}\nelse\n{\n    app.UseExceptionHandler();\n}\n\napp.Run();\n</code></pre> <ol> <li><code>UseDeveloperExceptionPage</code> middleware captures unhandled exceptions from the pipeline &amp; generate HTML error response.</li> </ol>","tags":[".NET","C#"]},{"location":"snippets/dotnet/serilog/","title":"Serilog","text":"<p>The repository for these snippets can be found here: Krake.Snippets.Serilog</p>","tags":[".NET","C#"]},{"location":"snippets/dotnet/serilog/#net-minimal-api-project","title":".NET Minimal API Project","text":"<p>Add these two Nuget packages to the .NET project.</p> <pre><code>dotnet add package Serilog.AspNetCore\ndotnet add package Serilog.Sinks.Console\n</code></pre> <p>Afterwards setup Serilog in the <code>Program.cs</code> file.</p> Program.cs<pre><code>using Serilog;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nLog.Logger = new LoggerConfiguration()\n    .ReadFrom.Configuration(builder.Configuration)\n    .CreateLogger();\n\nbuilder.Host.UseSerilog(static (ctx, lc) =&gt; lc.ReadFrom.Configuration(ctx.Configuration)); // (1)\n//builder.Services.AddSerilog(Log.Logger) // (2)\n\nvar app = builder.Build();\n\napp.UseSerilogRequestLogging();\n\ntry\n{\n    app.Run();\n}\nfinally\n{\n    Log.CloseAndFlush();\n}\n</code></pre> <ol> <li><code>UseSerilog</code> configures serilog as the only logging provider.</li> <li><code>AddSerilog</code> adds Serilog as one of potentially many logging providers.</li> </ol> <p>Add the following section to the <code>appsettings.[env].json</code> configuration files and remove the default <code>Logging</code> section.</p> appsettings.json<pre><code>{\n    \"Serilog\": {\n        \"Using\": [\n            \"Serilog.Sinks.Console\"\n        ],\n        \"MinimumLevel\": {\n            \"Default\": \"Information\",\n            \"Override\": {\n                \"Microsoft\": \"Warning\",\n                \"Microsoft.AspNetCore\": \"Warning\",\n                \"System\": \"Warning\"\n            }\n        },\n        \"WriteTo\": [\n            {\n                \"Name\": \"Console\"\n            }\n        ],\n        \"Enrich\": [\n            \"FromLogContext\",\n            \"WithMachineName\",\n            \"WithThreadId\"\n        ],\n        \"Properties\": {\n            \"Application\": \"[Name]\"\n        }\n    }\n}\n</code></pre>","tags":[".NET","C#"]},{"location":"snippets/git/basics/","title":"Git Basics","text":"<p>Installing Git version control.</p>","tags":["Git"]},{"location":"snippets/git/basics/#setup","title":"Setup","text":"Command Purpose <code>git</code> List all available Git commands <code>git config</code> Configure Git settings (<code>--local</code> or <code>--global</code>) <code>git config --global user.name \"&lt;name&gt;\"</code> Set the global Git username <code>git config --global user.email \"&lt;email&gt;\"</code> Set the global Git email address <code>git config --global --list</code> Display the global Git configuration settings","tags":["Git"]},{"location":"snippets/git/basics/#git-fundamentals","title":"Git Fundamentals","text":"Command Purpose <code>git init</code> Initialize a new local repository, creating a <code>.git</code> folder <code>git status</code> Display the current status of the repository <code>git add &lt;filename&gt;</code> Add a specified file from the working directory to the staging area <code>git add .</code> Add all files from the current directory and subfolders to staging <code>git add -A</code> Add all files from the root directory to staging <code>git commit -m \"&lt;message&gt;\"</code> Commit staged changes to the local repository with a message <sup>1</sup> <code>git log</code> View the commit history <code>git log --oneline</code> View a condensed version of the commit history <code>git reset HEAD~1</code> Undo the last commit, removing it from history <code>git revert &lt;SHA&gt;</code> Revert a specific commit while preserving the history <code>git commit --amend --no-edit</code> Add staged changes to the previous commit without changing the message","tags":["Git"]},{"location":"snippets/git/basics/#git-branching","title":"Git Branching","text":"Command Purpose <code>git stash</code> Temporarily save changes without committing <code>git stash list</code> Display all stashed changes <code>git stash pop</code> Reapply stashed changes and remove from stash <code>git stash apply</code> Reapply stashed changes without removing from stash <code>git stash -u</code> Stash changes, including untracked files <code>git clean -f</code> Force delete untracked files in the working directory <code>git clean -fd</code> Force delete untracked files, directories, and subfolders <code>git reset --hard</code> Reset tracked files to the last commit state <code>git checkout -b &lt;branch_name&gt;</code> Create and switch to a new branch <code>git checkout &lt;branch_name&gt;</code> Switch to an existing branch <code>git merge &lt;branch_name&gt;</code> Merge <code>&lt;branch_name&gt;</code> into the current branch <code>git rebase &lt;branch_name&gt;</code> Reapply commits from your current branch on top of <code>&lt;branch_name&gt;</code> <code>git branch --list</code> List all local branches <code>git branch -d &lt;branch_name&gt;</code> Delete the specified branch (if merged) <code>git branch -D &lt;branch_name&gt;</code> Force delete the specified branch <code>git cherry-pick &lt;commit&gt;</code> Apply a specific commit from another branch onto the current branch <p>What is the <code>HEAD</code>? </p> <p><code>HEAD</code> refers to the latest commit that your current branch is pointing to.  It's essentially a reference to the current branch, indicating where you are in the commit history.</p>","tags":["Git"]},{"location":"snippets/git/basics/#git-remote","title":"Git Remote","text":"Command Purpose <code>git remote add origin &lt;remote_url&gt;</code> Add a remote repository URL for your local repository <code>git branch -M main</code> Rename the current branch to <code>main</code> <code>git remote -v</code> List all configured remote repositories and their URLs <code>git push -u origin main</code> Push local <code>main</code> branch to the remote repository and set it as the default upstream branch <code>git push</code> Push changes from the current branch to the remote repository <code>git push -u origin &lt;branch_name&gt;</code> Push the specified branch to the remote repository and set it as the default upstream branch <code>git config --global --add --bool push.autoSetupRemote true</code> Automatically set up tracking of branches when pushing them for the first time <code>git checkout &lt;filename&gt;</code> Discard changes in a specific file and revert to the last committed version <code>git checkout &lt;*.cs&gt;</code> Discard changes in all files with a <code>.cs</code> extension (using wildcard) <code>git checkout &lt;**/*.cs&gt;</code> Discard changes in all <code>.cs</code> files recursively in subdirectories (using wildcard) <code>git fetch</code> Download updates from the remote repository without merging them into your current branch <code>git pull</code> Fetch and merge changes from the remote repository into your current branch <code>git pull origin &lt;branch_name&gt;</code> Fetch and merge changes from a specific branch in the remote repository into your current branch <code>git clone &lt;repo_url&gt;</code> Create a local copy of a remote repository","tags":["Git"]},{"location":"snippets/git/basics/#git-aliases","title":"Git Aliases","text":"Command Purpose <code>git config --global alias.co \"checkout\"</code> Create a global alias co for the git checkout command <code>git config --global alias.copm '!git checkout main &amp;&amp; git pull'</code> Create a global alias copm to switch to the main branch and pull the latest changes from the remote repository <ol> <li> <p>A commit is like a save point and is identified by a unique SHA hash.\u00a0\u21a9</p> </li> </ol>","tags":["Git"]},{"location":"snippets/git/strategy/","title":"Git Strategies","text":"<p>Trunk-Based Development (TBD) is a simpler approach where everyone works on a single <code>main</code> branch.  Changes are merged frequently, ensuring continuous integration and faster feedback.  Additionally, TBD often incorporates feature management techniques, such as feature flags, to enable controlled deployment and experimentation of new features.</p> <p>Git Flow uses multiple branches (<code>master</code>, <code>develop</code>, <code>feature</code>, etc.) for different stages of development,  offering a more structured workflow but potentially slower feedback loops. This is a legacy Git workflow, Trunk-Based Development should be the preferred choice. </p>","tags":["Git"]},{"location":"snippets/github/basics/","title":"GitHub","text":"<p>You can created an account here on GitHub.</p>","tags":["Git","GitHub"]},{"location":"snippets/github/basics/#setup-authentication","title":"Setup Authentication","text":"","tags":["Git","GitHub"]},{"location":"snippets/github/basics/#pat","title":"PAT","text":"","tags":["Git","GitHub"]},{"location":"snippets/github/basics/#ssh","title":"SSH","text":"","tags":["Git","GitHub"]},{"location":"snippets/github/basics/#pull-requests","title":"Pull Requests","text":"","tags":["Git","GitHub"]},{"location":"snippets/github/basics/#merging-strategies","title":"Merging Strategies","text":"<ul> <li>Create a merge commit</li> <li>Squash and merge</li> <li>Rebase and merge</li> </ul>","tags":["Git","GitHub"]},{"location":"snippets/github/basics/#clone-vs-fork","title":"Clone vs Fork","text":"","tags":["Git","GitHub"]},{"location":"snippets/github/basics/#repo-settings","title":"Repo Settings","text":"","tags":["Git","GitHub"]},{"location":"snippets/github/basics/#pull-requests_1","title":"Pull requests","text":"<ul> <li>Pull Requests methods -&gt; squash commit</li> <li>Always suggest updating pull request branches </li> <li>Allow for Auto merge</li> <li>Automatically delete head branches</li> </ul>","tags":["Git","GitHub"]},{"location":"snippets/github/basics/#branch-protection-rules","title":"Branch protection rules","text":"<ul> <li>Require a pull request before merging </li> <li>Require approvals </li> <li>Dismiss stale pull request approvals when new commits are pushed</li> <li>Require status checks to pass before merging</li> </ul>","tags":["Git","GitHub"]},{"location":"snippets/linux/basics/","title":"Linux Basics","text":"","tags":["Git"]},{"location":"snippets/linux/basics/#essential-commands","title":"Essential Commands","text":"","tags":["Git"]},{"location":"snippets/linux/basics/#list-directory-contents","title":"List Directory Contents","text":"Command Purpose <code>ls</code> Lists the contents of the current directory <code>ls -sS</code> Lists files sorted by size and shows their sizes <code>ls -l</code> Displays detailed information about files <code>ls -a</code> Shows hidden files (files starting with a dot) <code>ls -lh</code> Lists files with human-readable sizes","tags":["Git"]},{"location":"snippets/linux/basics/#change-directory","title":"Change Directory","text":"Command Purpose <code>cd &lt;name&gt;</code> Navigate to a specified directory <code>cd ..</code> Move up one directory level <code>cd -</code> Switch to the previous directory <code>cd ~</code> Return to the home directory <code>cd /path/to/directory</code> Jump directly to an absolute path","tags":["Git"]},{"location":"snippets/linux/basics/#print-working-directory","title":"Print Working Directory","text":"Command Purpose <code>pwd</code> Displays the current directory path","tags":["Git"]},{"location":"snippets/linux/basics/#print-to-standard-output","title":"Print to Standard Output","text":"Command Purpose <code>echo &lt;text&gt;</code> Prints the specified text <code>echo $PWD</code> Displays the current directory environment variable <code>echo $USER</code> Displays the current user's username <code>echo \"Hello\" &gt; file.txt</code> Writes text to a file","tags":["Git"]},{"location":"snippets/linux/basics/#make-a-directory","title":"Make a Directory","text":"Command Purpose <code>mkdir &lt;directory_name&gt;</code> Creates a new directory <code>mkdir -p &lt;path/to/dir&gt;</code> Creates nested directories as needed <code>mkdir -p projects/{project1,project2}</code> Creates structured directories","tags":["Git"]},{"location":"snippets/linux/basics/#create-a-new-file","title":"Create a New File","text":"Command Purpose <code>touch &lt;file_name&gt;</code> Creates an empty file <code>touch existing_file.txt</code> Updates the timestamp of an existing file <code>touch file1.txt file2.txt</code> Creates multiple files at once","tags":["Git"]},{"location":"snippets/linux/basics/#remove-files-or-directories","title":"Remove Files or Directories","text":"Command Purpose <code>rm &lt;file_name&gt;</code> Deletes a specified file <code>rm -i</code> Prompts for confirmation before deletion <code>rm -rf &lt;directory_name&gt;</code> Forcefully deletes a directory and its contents <code>rm *.log</code> Deletes all <code>.log</code> files in the directory <code>find . -name \"*.tmp\" -exec rm {} +</code> Deletes files by criteria","tags":["Git"]},{"location":"snippets/linux/basics/#read-file-contents","title":"Read File Contents","text":"Command Purpose <code>cat &lt;file_name&gt;</code> Displays the contents of a file <code>cat &lt;file_name&gt; -n</code> Displays file contents with line numbers <code>cat file1 file2 &gt; combined.txt</code> Combines multiple files into one <code>cat /var/log/syslog | grep error</code> Example of searching for logs","tags":["Git"]},{"location":"snippets/linux/basics/#copy-files-or-directories","title":"Copy Files or Directories","text":"Command Purpose <code>cp &lt;source&gt; &lt;destination&gt;</code> Copies a file to a new location <code>cp -r src_dir dest_dir</code> Copies directories recursively <code>cp -u &lt;file&gt; backup/</code> Copies only newer files","tags":["Git"]},{"location":"snippets/linux/basics/#move-or-rename-files","title":"Move or Rename Files","text":"Command Purpose <code>mv &lt;source&gt; &lt;destination&gt;</code> Moves or renames a file <code>mv &lt;file1&gt; &lt;file2&gt; &lt;destination_directory&gt;</code> Moves multiple files <code>mv old_dir new_dir</code> Renames a directory <code>mv *.txt documents/</code> Organizes files by type","tags":["Git"]},{"location":"snippets/linux/basics/#show-command-path","title":"Show Command Path","text":"Command Purpose <code>which &lt;command&gt;</code> Shows where a command is located","tags":["Git"]},{"location":"snippets/linux/basics/#change-file-permissions","title":"Change File Permissions","text":"Command Purpose <code>chmod &lt;options&gt; &lt;file&gt;</code> Modifies file permissions","tags":["Git"]},{"location":"snippets/linux/basics/#change-file-ownership","title":"Change File Ownership","text":"Command Purpose <code>chown &lt;owner&gt;:&lt;group&gt; &lt;file&gt;</code> Changes the owner and group of a file","tags":["Git"]},{"location":"snippets/linux/basics/#execute-commands-as-superuser","title":"Execute Commands as Superuser","text":"Command Purpose <code>sudo &lt;command&gt;</code> Runs a command with administrative privileges","tags":["Git"]},{"location":"snippets/linux/basics/#search-text-in-files","title":"Search Text in Files","text":"Command Purpose <code>grep &lt;pattern&gt; &lt;file&gt;</code> Searches for a pattern in a file","tags":["Git"]},{"location":"snippets/linux/basics/#stream-editor","title":"Stream Editor","text":"Command Purpose <code>sed 's/pattern/replace/' &lt;file&gt;</code> Replace text in a file","tags":["Git"]},{"location":"snippets/linux/basics/#get-absolute-file-path","title":"Get Absolute File Path","text":"Command Purpose <code>realpath &lt;file&gt;</code> Displays the absolute path of a file","tags":["Git"]},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/advent-of-code/","title":"Advent of Code","text":""}]}